import cube             from 'cube-js';

import Q                from 'q';
import log              from 'loglevel';
import S                from 'sprintf-js';

import jquery           from 'jquery'

import ga               from 'ut/ga-agent';
import i18n             from 'chrome/i18n'
import {LocalCache, PrefixLocalCache} from 'chrome/local-cache'

import template         from 'util/template.js'

var style = require(__style_dir__ + '/app.scss');

window.$ = jquery;
log.setLevel('trace');

var Controller = function() {
  var prefix = 'leetcode';
  this.localCache = new PrefixLocalCache(prefix);
};

cube.mix(Controller.prototype, {

  selectedList: {},
  hide: false,

  events: {
    'click .js-lt-menu-show-to-do': 'clickShowToDo',
    'click .js-lt-menu-show-all': 'clickShowAll',
    'click .js-lt-menu-clear': 'clickClear',
    'click .js-problem-item-add': 'clickAddItem',
    'click .js-problem-item-remove': 'clickRemoveItem',
    'click table': 'onTableChange',
  },

  onTableChange: function() {
    this.updateItemDisplay();
  },

  loadLastData: function() {
    var me = this;
    this.localCache.get('last_data', function(data) {
      cube.mix(me, data);
      const uri = new cube.URI(document.location.href);
      me.hide = uri.getQueryParams()['will-be-done-soon'];
      me.render()
    });
  },

  flushLastData: function() {
    var data = {
      selectedList: this.selectedList,
    }
    this.localCache.set('last_data', data);
  },

  clickShowToDo: function() {
    this.hide = true;
    this.updateItemDisplay();
  },

  clickShowAll: function() {
    this.hide = false;
    this.updateItemDisplay();
  },

  clickClear: function() {
    this.hide = false;
    this.selectedList = {};
    this.flushLastData();
    this.updateItemDisplay();
  },

  clickAddItem: function(e) {
    var index = $(e.target).parents('tr').data('index');
    this.selectedList[index] = true;
    this.flushLastData();
    this.updateItemDisplay();
  },

  clickRemoveItem: function(e) {
    var index = $(e.target).parents('tr').data('index');
    this.selectedList[index] = false;
    this.flushLastData();
    this.updateItemDisplay();
  },

  start: function() {
    this.hackStyle();
    cube.bindEvents(this, this.events, $('body'));
    this.loadLastData();
  },

  render: function() {
    this.renderMenu();
    this.updateItemDisplay();
  },

  updateItemDisplay: function() {
    var itemList = $('table tbody tr');
    cube.forEach(itemList, function(item, index) {
      item = $(item);
      var index = parseInt(item.find('td:nth-child(2)').text());
      item.data('index', index);
      this.renderItem(item);
    }, this);
  },

  hackStyle: function() {
    if (__is_dev__) {
      $('<style>' + style + '</style>').appendTo('head')
    }
  },

  renderMenu: function() {
    var data = {
    };
    var menu = $(template.renderHtml('leetcode-menu', data));
    cube.forEach($('table'), function(table) {
      table = $(table);
      if (table.length) {
        table.before(menu);
      }
    });
  },

  renderItem: function(item) {
    var index = item.data('index');
    var selected = this.selectedList[index];
    if (this.hide && !selected) {
      item.hide();
      return;
    } else {
      item.show();
    }

    item.find('.problem-item-menu').remove();
    const data = {
      selected: this.selectedList[item.data('index')],
    };
    var status = $(template.renderHtml('problem-item', data));
    item.find('td>a').after(status);
  },
});

module.exports = Controller;
